name: SPT Server Linux Release Build - C#

on:
  workflow_dispatch:
    inputs:
      buildTag:
        description: "The tag to build on"
        required: true
        type: string

concurrency:
  group: spt-release-build-sharp
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.0.2
    outputs:
      proceed: ${{ steps.check-existence.outputs.proceed }}
      branch_server: ${{ steps.determine-context.outputs.branch_server }}
      target_tag: ${{ steps.determine-context.outputs.target_tag }}
      build_type: ${{ steps.determine-build-type.outputs.build_type }}
      client_version: ${{ steps.versions.outputs.client_version }}
      spt_version: ${{ steps.versions.outputs.spt_version }}
      platform: 'linux-x64'

    steps:
      - name: Determine Build Context
        id: determine-context
        shell: bash
        run: |
          echo "Determining build context..."

          # Determine the tag based on the event type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_NAME="${{ github.event.inputs.buildTag }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG_NAME="${{ github.event.client_payload.tag }}"
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

          if [[ -z "$TAG_NAME" ]]; then
            echo "No tag provided in event payload."
            exit 1
          fi

          echo "target_tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Target tag is $TAG_NAME"

      - name: Determine Build Type
        id: determine-build-type
        shell: bash
        run: |
          TARGET_TAG="${{ steps.determine-context.outputs.target_tag }}"
          TARGET_TAG_UPPER="${TARGET_TAG^^}"

          BUILD_TYPE="DEBUG"
          if [[ "$TARGET_TAG_UPPER" =~ -BEM ]]; then
            BUILD_TYPE="BLEEDING_EDGE_MODS"
          elif [[ "$TARGET_TAG_UPPER" =~ -BE ]]; then
            BUILD_TYPE="BLEEDING_EDGE"
          elif [[ "$TARGET_TAG_UPPER" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            BUILD_TYPE="RELEASE"
          fi

          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "Build type is $BUILD_TYPE"

      - name: Check Existence
        id: check-existence
        shell: bash
        run: |
          PROCEED="true"
          TAG="${{ steps.determine-context.outputs.target_tag }}"
          REPOS=("https://github.com/sp-tarkov/server-csharp.git")
          for REPO in "${REPOS[@]}"; do
            echo "Checking for tag $TAG in $REPO..."
            if ! git ls-remote --tags $REPO $TAG | grep -q $TAG; then
              echo "Tag $TAG not found in $REPO"
              PROCEED="false"
              break
            fi
          done
          echo "proceed=$PROCEED" >> $GITHUB_OUTPUT

      - name: Tag Not Found
        if: steps.check-existence.outputs.proceed == 'false'
        run: |
          echo "Required branch/tag not found in one or more repositories, halting workflow."
          exit 1

      - name: Extract Versions
        id: versions
        shell: bash
        run: |
          rm -rf /workspace/SPT/Build/server-csharp-core
          git init /workspace/SPT/Build/server-csharp-core
          cd /workspace/SPT/Build/server-csharp-core
          git remote add origin https://github.com/sp-tarkov/server-csharp.git
          git config core.sparseCheckout true
          echo "Libraries/SPTarkov.Server.Assets/SPT_Data/configs/core.json" >> .git/info/sparse-checkout

          git fetch --depth=1 origin "${{ steps.determine-context.outputs.target_tag }}"
          git checkout FETCH_HEAD

          cd Libraries/SPTarkov.Server.Assets/SPT_Data/configs
          SPT_VERSION=$(jq -r '.sptVersion' core.json)
          FULL_VERSION=$(jq -r '.compatibleTarkovVersion' core.json)
          CLIENT_VERSION=${FULL_VERSION##*.}

          echo "client_version=$CLIENT_VERSION" >> $GITHUB_OUTPUT
          echo "spt_version=$SPT_VERSION" >> $GITHUB_OUTPUT

          echo "Client version is $CLIENT_VERSION"
          echo "SPT version is $SPT_VERSION"

  build-server:
    needs: prepare
    if: needs.prepare.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.0.2
    outputs:
      server_commit: ${{ steps.commit-hash.outputs.server_commit }}
    steps:
      - name: Clone Server
        shell: bash
        run: |
          serverPath="$GITHUB_WORKSPACE/SPT/Build/server-csharp"

          # Delete old remnants of the last build.
          if [ -d "$serverPath" ]; then
              rm -rf "$serverPath"
          fi

          TARGET="${{ needs.prepare.outputs.target_tag }}"
  
          echo "Cloning target: $TARGET"
          git clone https://github.com/sp-tarkov/server-csharp.git --branch "$TARGET" --depth 1 "$serverPath"
  
          # Pull LFS files.
          cd "$serverPath"
          git lfs install --local
          git lfs pull

      - name: Output Commit Hash
        id: commit-hash
        shell: bash
        run: echo "server_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        working-directory: SPT/Build/server-csharp

      - name: Publish Server
        shell: bash
        run: |
          dotnet publish ./SPTarkov.Server/SPTarkov.Server.csproj -c Release -f net9.0 -r ${{ needs.prepare.outputs.platform }} -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishSingleFile=true --self-contained false -p:SptBuildType=${{ needs.prepare.outputs.build_type }} -p:SptVersion=${{ needs.prepare.outputs.spt_version }} -p:SptBuildTime=$( date +%Y%m%d ) -p:SptCommit=${{ steps.commit-hash.outputs.server_commit }} -p:IsPublish=true
          cd ./SPTarkov.Server/bin/Release/net9.0/${{ needs.prepare.outputs.platform }}/publish/
          chmod +x SPTarkov.Server
        working-directory: SPT/Build/server-csharp

      - name: Upload Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact
          path: |
            SPT/Build/server-csharp/SPTarkov.Server/bin/Release/net9.0/${{ needs.prepare.outputs.platform }}/publish/
            !SPT/Build/server-csharp/SPTarkov.Server/bin/Release/net9.0/${{ needs.prepare.outputs.platform }}/publish/**/*.pdb
          compression-level: 0
          retention-days: 1
          overwrite: true
          if-no-files-found: error

  assemble-and-publish:
    needs: [prepare, build-server]
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.0.2
    steps:
      - name: Clean Directory
        shell: bash
        run: |
          rm -rf release build
          mkdir -p release

      - name: Download Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: server-artifact
          path: release/

      - name: Clone Build Project
        uses: actions/checkout@v4
        with:
          repository: MadByteDE/SPT-Linux-Build
          path: build

      - name: List Release Contents
        shell: bash
        run: tree -a release

      - name: Generate Release Filename
        id: generate-filename
        shell: bash
        run: |
          BUILD_TYPE=${{ needs.prepare.outputs.build_type }}
          SPT_NAME='SPT-SERVER'
          SPT_VERSION=${{ needs.prepare.outputs.spt_version }}
          CLIENT_VERSION=${{ needs.prepare.outputs.client_version }}
          UPPER_PLATFORM=$(echo "${{ needs.prepare.outputs.platform }}" | tr '[:lower:]' '[:upper:]')
          SERVER_COMMIT=${{ needs.build-server.outputs.server_commit }}
          TARGET_TAG=${{ needs.prepare.outputs.target_tag }}
          DATE=$(date +%Y%m%d)

          if [[ "${{ needs.prepare.outputs.is_nightly }}" == "true" ]]; then
            BASE_NAME="SPT-SERVER-NIGHTLY-${UPPER_PLATFORM}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${DATE}"
          else
            UPPER_BUILD_TYPE=$(echo "$BUILD_TYPE" | tr '[:lower:]' '[:upper:]')
            UPPER_TARGET_TAG=$(echo "$TARGET_TAG" | tr '[:lower:]' '[:upper:]')
            

            if [ "$BUILD_TYPE" = "RELEASE" ]; then
              BASE_NAME="${SPT_NAME}-${UPPER_PLATFORM}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}"
            else
              TAG_PART=""
              if [[ "$UPPER_TARGET_TAG" == *-*-* ]]; then
                SUFFIX="${UPPER_TARGET_TAG##*-}"
                if [ "$SUFFIX" != "$UPPER_TARGET_TAG" ]; then
                  TAG_PART="-${SUFFIX}"
                fi
              fi
              if [ -n "$TAG_PART" ]; then
                BASE_NAME="${SPT_NAME}-${UPPER_PLATFORM}-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}${TAG_PART}"
              else
                BASE_NAME="${SPT_NAME}-${UPPER_PLATFORM}-${UPPER_BUILD_TYPE}-${SPT_VERSION}-${CLIENT_VERSION}-${SERVER_COMMIT}-${DATE}"
              fi
            fi
          fi

          echo "base_name=$BASE_NAME" >> $GITHUB_OUTPUT
          echo "build_name=${BASE_NAME}.7z" >> $GITHUB_OUTPUT

          echo "Release filename: ${BASE_NAME}.7z"

      - name: Compress Release
        id: compress-release
        shell: bash
        run: |
          cd release
          7z a -mx=9 -m0=lzma2 "../${{ steps.generate-filename.outputs.build_name }}" .
          echo "Release compressed as ${{ steps.generate-filename.outputs.build_name }}."

          FILE_SIZE_MB=$(stat -c %s "../${{ steps.generate-filename.outputs.build_name }}" | awk '{printf "%.2f MB", $1 / 1024 / 1024}')
          FILE_HASH=$(md5sum "../${{ steps.generate-filename.outputs.build_name }}" | awk '{print $1}' | xxd -r -p | base64)

          echo "file_size_mb=$FILE_SIZE_MB" >> $GITHUB_OUTPUT
          echo "file_hash=$FILE_HASH" >> $GITHUB_OUTPUT

      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v5.1.0
        with:
          name: server-artifact

      - name: Publish Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ needs.prepare.outputs.target_tag }}
          files: ${{ steps.generate-filename.outputs.build_name }}
            